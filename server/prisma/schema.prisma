generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String   @id @default(uuid())
  wallet_address String   @unique
  display_name   String?
  avatar         String?
  created_at     DateTime @default(now()) @map("created_at")
  updated_at     DateTime @default(now()) @updatedAt @map("updated_at")

  files      File[]
  sharedBy   SharedFile[]
  accessLogs AccessLog[]

  @@map("users")
}

model File {
  id          String   @id @default(uuid())
  name        String
  size        BigInt?
  type        String?
  ipfsCid     String   @map("ipfs_cid")
  ownerId     String   @map("owner_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  isEncrypted Boolean  @default(true) @map("is_encrypted")

  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  sharedFiles   SharedFile[]
  accessLogs    AccessLog[]
  encryptionKey EncryptionKey?

  @@index([ownerId])
  @@index([ipfsCid])
  @@map("files")
}

model SharedFile {
  id         String     @id @default(uuid())
  fileId     String     @map("file_id")
  sharedById String?    @map("shared_by")
  sharedWith String
  permission Permission
  status     Status     @default(active)
  expiresAt  DateTime?  @map("expires_at")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at")

  file     File  @relation(fields: [fileId], references: [id], onDelete: Cascade)
  sharedBy User? @relation(fields: [sharedById], references: [id], onDelete: Cascade)

  @@index([fileId])
  @@index([sharedById])
  @@index([sharedWith])
  @@map("shared_files")
}

model AccessLog {
  id        String   @id @default(uuid())
  fileId    String   @map("file_id")
  userId    String   @map("user_id")
  action    Action
  timestamp DateTime @default(now())
  ipAddress String?  @db.Inet

  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([fileId])
  @@index([userId])
  @@index([timestamp])
  @@map("access_logs")
}

model EncryptionKey {
  id                    String   @id @default(uuid())
  fileId                String   @unique @map("file_id")
  encryptedSymmetricKey String   @map("encrypted_symmetric_key")
  createdAt             DateTime @default(now()) @map("created_at")

  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("encryption_keys")
}

enum Permission {
  view
  edit
  download
}

enum Status {
  active
  revoked
  pending
}

enum Action {
  view
  download
}
